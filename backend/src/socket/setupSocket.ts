import { Server as HTTPServer } from 'http';
import puppeteer from 'puppeteer';
import { Server, Socket } from 'socket.io';

interface ParseParams {
  url: string;
  pages: number;
}

interface Book {
  title?: string;
  author?: string;
  rating?: string;
  countRating?: string;
  price?: string;
}

export function setupSocket(server: HTTPServer): void {
  const io = new Server(server, {
    path: '/socket.io', // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å
    cors: {
      origin: 'http://localhost:3000',
      methods: ['GET', 'POST'],
    },
  });

  io.on('connection', (socket: Socket) => {
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω:', socket.id);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    socket.on('startParsing', async (data) => {
      const { baseUrl, pages } = data;
      const allBooks: any[] = [];

      const browser = await puppeteer.launch({ headless: 'new' as any });
      const page = await browser.newPage();

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
      socket.emit('statusUpdate', { message: '–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã...' });

      for (let pageNum = 1; pageNum <= pages; pageNum++) {
        const url = `${baseUrl}${pageNum > 1 ? `?page=${pageNum}` : ''}`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        socket.emit('statusUpdate', { message: `üîÑ –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${pageNum}...` });

        await page.goto(url, { waitUntil: 'networkidle2' });

        await page.waitForSelector('[data-testid="art__title"]');

        const books = await page.evaluate(() => {
          const items = Array.from(document.querySelectorAll('[data-testid="art__wrapper"]'));
          return items.map((item) => {
            const title = item.querySelector('[data-testid="art__title"]')?.textContent?.trim();
            const author = item.querySelector('[data-testid="art__authorName"]')?.textContent?.trim();
            const rating = item.querySelector('[data-testid="art__ratingAvg"]')?.textContent?.trim();
            const countRating = item.querySelector('[data-testid="art__ratingCount"]')?.textContent?.trim();
            const price = item.querySelector('[data-testid="art__finalPrice"]')?.textContent?.trim();

            return { title, author, rating, countRating, price };
          });
        });

        allBooks.push(...books);
      }

      await browser.close();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –∫–ª–∏–µ–Ω—Ç—É
      socket.emit('parsingResult', {
        success: true,
        books: allBooks,
        message: `‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${allBooks.length} –∫–Ω–∏–≥`,
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    socket.on('disconnect', () => {
      console.log('‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω:', socket.id);
    });
  });
}
